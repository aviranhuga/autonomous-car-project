/*
 * Pit.c
 *
 *  Created on: Jun 16, 2017
 *      Author: Aviranh
 */



#include "TFC.h"
#include "mcg.h"




static int LeftMoveTooMuch = 0;
static int RightMoveTooMuch = 0;
static short WallDrive = 0;
static short CheckIfAlreadySearch = 0;
static int NumberOfFixes = 0;
static double PrevLeftSonicSample;
static double PrevRightSonicSample;
static short NumberOfTargetOnRight=2;
static short NumberOfTargetOnLeft=2;
// for sample2
short sample2Helper = 0;
static double RightScanSamplesTable[12][3]; 
static double LeftScanSamplesTable[12][3];
short sampleCounter = 0;
//end of sample2
// for sample4
short sample4Helper = 0;
static double DriveScanSamples[2][2];
static short SecondDistanceEN = 0;
static short SecondLeftSonicMinDistance = 0;
static short SecondLeftSonicMaxDistance = 0;
static short SecondRightSonicMinDistance = 0;
static short SecondRightSonicMaxDistance = 0;
static short lastPit0state = 0;
static short DriveTime=0;
static short sample0Helper = 0;
// For PIT1
// for case1
static short count = 1;
static short ChooseSide;
//end of case1
static short M10Helper=0;
static int CountTimeForward = 0;
static CheckIfOnBlackLine = 0;
static int HowMuchForward = 10;
static int Count3Sec = 3;
static int CountRangeOfBlackLine = -5;
static int CountHowMuchToGoBack = 0;
static short FinishOneSideCount = 0;
static short FinishLeftSideCount = 0;
static double smaple=0;
static int FarOfTarget = 0;
static int map[640][450];


//-----------------------------------------------------------------
// PIT - ISR = Interrupt Service Routine
//-----------------------------------------------------------------

void PIT_IRQHandler(){
	
	if(PIT_TFLG0 & 0x1){
	switch(Pit0state){
	
		case 0:// Fix motor movement
			if (sample0EN==1){
				if ((GPIOE_PDIR & PORT_LOC(2)) | (GPIOE_PDIR & PORT_LOC(3)) | 
				   (GPIOE_PDIR & PORT_LOC(4)) | (GPIOE_PDIR & PORT_LOC(5)) |
				   (GPIOA_PDIR & PORT_LOC(16))){
					motor_DirSpeed(0,0);
					sample0EN = 0;
					CheckIfOnBlackLine = 1;
					Pit0state = 1;
				}//end of if
				
					switch (sample0Helper){
					case 0:	
							if (NumberOfFixes>1){
								NumberOfFixes--;
								if(FinishOneSideCount == 0){
									TPM2_C1V = TPM2_C1V + (0x493a/5); // change speed
									TPM1_C0V = TPM1_C0V - (0x493a/5); // change speed
								}else if(FinishOneSideCount == 1){
									TPM2_C1V = TPM2_C1V - (0x493a/6); // change speed
									TPM1_C0V = TPM1_C0V + (0x493a/6); // change speed
								}
								sample0Helper=1;
					}//end of number of fixes
							else NumberOfFixes=0;
							break;
							
					case 1:
						TPM2_C1V = (0x493a/10)*3; // change speed
						TPM1_C0V = (0x493a/10)*3;
						sample0Helper=0;
						break;
						
				  }//end of sample0Helper
				
			}//end of sample0EN
			else Pit0state=1;
					break;// BREAK OF CASE 0 !

		case 1: // Move servo motors to certain degree
			if(sample1EN == 1){
			if(RightServoWantedDegree == RightServocurr & LeftServoWantedDegree == LeftServocurr) {// no scan or finish scan
				Pit0state=2;	
				sample1EN = 0;
				
			}
			else{ if(RightServoWantedDegree > RightServocurr) // no scan or finish scan
					RightMove5Degree(0); // move to 90 degree		
		      	  else if(RightServoWantedDegree < RightServocurr)
		      		RightMove5Degree(1); // move to 0 degree
 
					if(LeftServoWantedDegree > LeftServocurr) // no scan or finish scan
						LeftMove5Degree(0); // move to 90 degree		
					else if(LeftServoWantedDegree < LeftServocurr) 
					 	LeftMove5Degree(1); // move to 0 degree
				  } // end of else
			}//end of sample1EN
			else Pit0state=2;
					break;
					
		case 2:// Scan with ultra sonic for an angle
			if(sample2EN == 1){		
				
			if(RightServoWantedDegree == RightServocurr & LeftServoWantedDegree == LeftServocurr) {// no scan or finish scan
				Pit0state=3;	
				sample2EN = 0;
				sampleCounter = 0;
			}else{	
				switch(sample2Helper){
					case 0: // take sample
						takesample();
						sample2Helper = 1;
						break;				
					case 1: // take sample
						RightScanSamplesTable[sampleCounter][2] = RightSonicSample;
						LeftScanSamplesTable[sampleCounter][2] = LeftSonicSample;
						takesample();
						sample2Helper = 2;
						break;	
					case 2: // move servo put sample in table
						if(RightSonicSample > 400) RightScanSamplesTable[sampleCounter][1] = RightScanSamplesTable[sampleCounter][2];
						else RightScanSamplesTable[sampleCounter][1] = RightSonicSample;
						if(LeftSonicSample > 400) LeftScanSamplesTable[sampleCounter][1] = LeftScanSamplesTable[sampleCounter][2];
						else LeftScanSamplesTable[sampleCounter][1] = LeftSonicSample;					
						RightScanSamplesTable[sampleCounter][0] = RightServocurr;		
						LeftScanSamplesTable[sampleCounter][0] = LeftServocurr;						
						sampleCounter++;
						if(RightServoWantedDegree > RightServocurr) // no scan or finish scan
							RightMove5Degree(0); // move to 90 degree		
						else if(RightServoWantedDegree < RightServocurr)
					      	RightMove5Degree(1); // move to 0 degree
			 
						if(LeftServoWantedDegree > LeftServocurr) // no scan or finish scan
							LeftMove5Degree(0); // move to 90 degree		
						else if(LeftServoWantedDegree < LeftServocurr) 
							LeftMove5Degree(1); // move to 0 degree
						
						sample2Helper = 0;
						break;

				}//end of sample2Helper
			}//end of else
		}//end of sample2EN	
			else Pit0state=3;
			break;	
			
		case 3:// BlackLine Keep
			if(sample3EN == 1){
				switch (sample3Helper){
				case 1:
					BlackLineKeeping();
					sample3Helper = 3;
					break;
				case 2:
					sample3Helper = 3;
					break;
				case 3:
					TPM2_C1V = (0x493a/10)*5; // change speed
					TPM1_C0V = (0x493a/10)*5; // change speed
					sample3Helper = 1;
					break;
				}//end of switch

			    if (sample3EN==0){
			    	Pit0state = 4;
					TPM2_C1V = (0x493a/10)*5; // change speed
					TPM1_C0V = (0x493a/10)*5; // change speed
			     }//end of if
			}//end of sample3EN
			else Pit0state = 4;
			break;
			
		case 4: // search for a tunnel and afraid from kir
			
			if(sample4EN == 1){
				switch(sample4Helper){
					case 0: // take sample
						WhichSide=0; // black line 
						takesample();
						sample4Helper = 1;
						
						if (BlacklineSearchEn==1)
							BlackLineKeeping();

								break;	
						
					case 1: 
						PrevLeftSonicSample=LeftSonicSample;
						PrevRightSonicSample=RightSonicSample;
                        takesample();
                        sample4Helper=2;
                        break;
                        
					case 2: //check right and left
						
						if(PrevLeftSonicSample > LeftSonicMinDistance && PrevLeftSonicSample < LeftSonicMaxDistance &&
						LeftSonicSample > LeftSonicMinDistance && LeftSonicSample < LeftSonicMaxDistance){// Left Side in range
							//UARTprintf(UART0_BASE_PTR,"LEFT BETWEEN");
							sample4Helper = 0;
							sample4EN = 0;
							Pit0state = 0;
							WhichSide=1;// LEFT IS 1
							motor_DirSpeed(0,0);	
							

						}// end of left range
						else if(RightSonicSample > RightSonicMinDistance && RightSonicSample < RightSonicMaxDistance &&
								PrevRightSonicSample > RightSonicMinDistance && PrevRightSonicSample < RightSonicMaxDistance)// right side in range
							{
							
							sample4Helper = 0;
							sample4EN = 0;
							Pit0state = 0;
							WhichSide=2;// RIGHT IS 2
							motor_DirSpeed(0,0);
							
						}// end of right range
				if (SecondDistanceEN==2){
					NumberOfFixes++;
					SecondDistanceEN=1;
					TPM2_C1V = (0x493a/3); // change speed
					TPM1_C0V = (0x493a/3); // change speed
				}
				else if(SecondDistanceEN == 1){	
					
						if(PrevLeftSonicSample > SecondLeftSonicMinDistance && PrevLeftSonicSample < SecondLeftSonicMaxDistance &&
						LeftSonicSample > SecondLeftSonicMinDistance && LeftSonicSample < SecondLeftSonicMaxDistance){// Left Side in range
							if(FinishOneSideCount == 0){
								TPM2_C1V = TPM2_C1V + (0x493a/5); // change speed
								TPM1_C0V = TPM1_C0V - (0x493a/5); // change speed
								SecondDistanceEN=2;
							}else if(FinishOneSideCount == 1){
								TPM2_C1V = TPM2_C1V - (0x493a/6); // change speed
								TPM1_C0V = TPM1_C0V + (0x493a/6); // change speed
								SecondDistanceEN=2;
							}
							
						}// end of left range
						
						else if(RightSonicSample > SecondRightSonicMinDistance && RightSonicSample < SecondRightSonicMaxDistance &&
								PrevRightSonicSample > SecondRightSonicMinDistance && PrevRightSonicSample < SecondRightSonicMaxDistance)// right side in range
							{
							if(FinishOneSideCount == 0){
								TPM2_C1V = TPM2_C1V + (0x493a/5); // change speed
								TPM1_C0V = TPM1_C0V - (0x493a/5); // change speed
								SecondDistanceEN=2;
							}else if(FinishOneSideCount == 1){
								TPM2_C1V = TPM2_C1V - (0x493a/6); // change speed
								TPM1_C0V = TPM1_C0V + (0x493a/6); // change speed
								SecondDistanceEN=2;
							}
							
						}// end of right range
						
				}// end of SecondDistanceEN
				
				else if(WallDrive == 1){
					if (RightMoveTooMuch == 2){
						TPM2_C1V = TPM2_C1V + (0x493a/5); // change speed
						TPM1_C0V = TPM1_C0V - (0x493a/5); // change speed
						RightMoveTooMuch = 0;
					}else if (LeftMoveTooMuch == 2){
						TPM2_C1V = TPM2_C1V - (0x493a/5); // change speed
						TPM1_C0V = TPM1_C0V + (0x493a/5); // change speed
						LeftMoveTooMuch = 0;
					}
					else if(PrevLeftSonicSample > SecondLeftSonicMinDistance && PrevLeftSonicSample < SecondLeftSonicMaxDistance &&
							LeftSonicSample > SecondLeftSonicMinDistance && LeftSonicSample < SecondLeftSonicMaxDistance &&
							RightSonicSample > SecondRightSonicMinDistance && RightSonicSample < SecondRightSonicMaxDistance &&
							PrevRightSonicSample > SecondRightSonicMinDistance && PrevRightSonicSample < SecondRightSonicMaxDistance)
							{
						motor_DirSpeed(0,0);
						Pit1state = 1;
						M11Helper = 0;
						sample4EN = 0;
						
							
					}
					else if(PrevLeftSonicSample > SecondLeftSonicMinDistance && PrevLeftSonicSample < SecondLeftSonicMaxDistance &&
						LeftSonicSample > SecondLeftSonicMinDistance && LeftSonicSample < SecondLeftSonicMaxDistance){// Left Side in range
							
								TPM2_C1V = TPM2_C1V - (0x493a/5); // change speed
								TPM1_C0V = TPM1_C0V + (0x493a/5); // change speed
								WallDrive = 2;
								RightMoveTooMuch++;
							
						}// end of left range
						
						else if(RightSonicSample > SecondRightSonicMinDistance && RightSonicSample < SecondRightSonicMaxDistance &&
								PrevRightSonicSample > SecondRightSonicMinDistance && PrevRightSonicSample < SecondRightSonicMaxDistance)// right side in range
							{
								TPM2_C1V = TPM2_C1V + (0x493a/5); // change speed
								TPM1_C0V = TPM1_C0V - (0x493a/5); // change speed
								WallDrive = 2;
								LeftMoveTooMuch ++;
						}// end of right range
						
						
				}//end of wallDrive	
				else if(WallDrive == 2){
					motor_DirSpeed(3,3);
					WallDrive = 1;
				}
				
				
				
						if (BlacklineSearchEn==1){
							TPM2_C1V = (0x493a/10)*4; // change speed
							TPM1_C0V = (0x493a/10)*4; // change speed
						}
						
						sample4Helper = 0;	
						break;	
			
				}								
						
			}else Pit0state = 0;
							break;
			
		}//end of Pit0state 
	PIT_TFLG0 = PIT_TFLG_TIF_MASK; //Turn off the Pit 0 Irq flag 
	}
	
//*******************************************************************************
// PIT1	
//*******************************************************************************	
	if(PIT_TFLG1 & 0x1){		
		
		CurrTime++;
		
		
          switch(Pit1state){
				
			case 0: // move forward untill get on black line
				switch(M10Helper){
				case 0:
					EncodersSensing();
					LastTime = CurrTime;
					CurrX = 0;
					CurrY = 450/2;
					sample0EN = 1;
					motor_DirSpeed(3,3);
					M10Helper = 1;
					break;
					
				case 1:
					FarOfTarget = IRTakeSample(smaple);
					if(FarOfTarget > 10 && FarOfTarget <120){
						M10Helper = 10;
					}
					HowMuchForward--;
					CurrX ++;
					if(CheckIfOnBlackLine == 1){
						M10Helper = 2;
						
					}else if(HowMuchForward == 0){// too much time
						motor_DirSpeed(0,0);
						M10Helper = 10; // turn right
					}
					break;
				case 2:
					if(CheckIfOnBlackLine == 1){
						Pit1state = 3;
						M10Helper = 0;
						
					}
					break;	
					
					
				case 10: // turned right
					if(TPM1_C0V==0){
						TurnRight();
						M10Helper = 11;
					}
					break;	
					
				case 11: // turned right
					if(CheckIfOnBlackLine == 1){// found on the right need to turn left
						NumberOfFocusOnBlackLine = 100;
		    			LeftFocusBlackLine();
		    			lastfix=0;// RIGHT
		    			M10Helper = 2;
					}
					else if(TPM1_C0V == 0){
							motor_DirSpeed(3,3);
							M10Helper = 12;
						}
					break;

				case 12: // turned right
					Count3Sec--;
					if(CheckIfOnBlackLine == 1){// found on the right need to turn left
						NumberOfFocusOnBlackLine = 100;
		    			LeftFocusBlackLine();
		    			lastfix=0;// RIGHT
		    			M10Helper = 2;
					}
					else if(Count3Sec == 0){// too much right need to turn left
						motor_DirSpeed(0,0);
						M10Helper = 20;
					}
					break;

				case 20: // turned right
					TurnLeft();
					M10Helper = 21;
					break;
					
				case 21: // turned right
					if(TPM2_C1V == 0){
						TurnLeft();
						M10Helper = 22;
					}
					break;
					
				case 22: // turned right
					if(TPM2_C1V == 0){
						motor_DirSpeed(3,3);
						M10Helper = 23;
						Count3Sec = 6;
					}
					break;
					
				case 23: // turned right
					Count3Sec--;
					if(CheckIfOnBlackLine == 1){// found on the right need to turn left
						NumberOfFocusOnBlackLine = 100;
		    			RightFocusBlackLine();
		    			lastfix=0;// RIGHT
		    			M10Helper = 2;
					}
					else if(Count3Sec == 0){// too much right need to turn left
						motor_DirSpeed(0,0);
						M10Helper = 24;
					}
					break;
					
				case 24: // turned right
					TurnRight();
					Count3Sec = 6;
					M10Helper = 10;
					break;
				}//end of m10Helper
		    		break;
						
			case 1: // Drive and search
		        switch(M11Helper){
			    	case 0:// Scan Both with 60 degree
			      	ServoScan();
			      	WallDrive = 0;
			      	M11Helper=3;
			      		break;//end case0
			        	
			        case 1: //CHOOSE SIDE
			        		ChooseSide = 2;
			        		ChooseSide = FindSide(); // Choose side with hole 
			        	if(ChooseSide == 0){ // right
			        		M11Helper = 2;
			        	}else {
			        		Pit1state = 2;
			        		M12Helper = 0;
			        		}
			        	break;
			        	
			    	case 2:// turn right
			      	TurnRight();
			      	M12Helper=20;
			      	Pit1state = 2;
			      		break;//end case0			        	
		
			    	case 3:// turn right
			    		UpdateLocationYnothing( CurrY, CurrY+1 , CurrX);
			    		M11Helper=4;
			      		break;//end case0
			      		
			    	case 4:// turn right
			    		M11Helper=5;
			      		break;//end case0
			      		
			    	case 5:// turn right
			    		M11Helper=6;
			      		break;//end case0
			      		
			    	case 6:// turn right
			    		M11Helper=1;
			      		break;//end case0
					        }//end of switchM11Helper
		        
				break;//of big case 1					
						
		     case 2: // Scan and Choose Side
			     switch(M12Helper){
				        
				    case 0:// Sreach to the left
				      	SearchToTheLeft(5,30,70,250);
				      	M12Helper=1;
				        break;//end case0
				        
				    case 1://DO NOTHING
				    	if(CheckIfAlreadySearch == 0)
				    		TurnLeft();
				        M12Helper=2;
							break;
							
				    case 2: //DO NOTHING
				      if(TPM2_C1V == 0){
				    	M12Helper=3;
			        	motor_DirSpeed(3,3);
			        	sample4EN=1;
			        	BlacklineSearchEn = 0;
				      }
				        	break;
				        	
				    case 3: //DO NOTHING
				    	if (sample4EN == 0){
				    		if(WhichSide == 1) {// left found
								M12Helper = 20;
								UTank();// make U turn
				    			}
				    		else{
				    			TurnRight();
				    			M12Helper = 4;
				    			}
				    	}
				        	break;
				        	
				        case 4: //CHOOSE SIDE
				        	if(TPM1_C0V == 0){
				        		SearchAndDriveFront(523,523,532,532);
				        		SecondRange(5,60,5,60);
				        		M12Helper = 6;
				        	}
				        	break;	
				        	
				//        case 5: //Turn Right
				 //       	M12Helper = 6;
				    //    	break;
				       	
				       	case 6: 
				        	motor_DirSpeed(3,3);
				        	sample4EN=1;
				        	BlacklineSearchEn = 0;
			        		WallDrive = 1;
				    		M12Helper = 50;
				       		break;	

				       		
				       	case 20: // Move servo to Search 
				       		if(TPM1_C0V == 0){
				       		SearchToTheRight(60,300,5,30);
				       		M12Helper = 21;
				       		}
				       		break;
				       		
				       	case 21:
				        	motor_DirSpeed(3,3);
				        	sample4EN=1;
				        	BlacklineSearchEn = 0;
				    		M12Helper = 22;				       		
				       		break;
				       		
				       	case 22: // Move servo to Search
					    	if (sample4EN == 0){
					    		if(WhichSide == 2) {// right found
									M12Helper = 0;
									CheckIfAlreadySearch = 1;
									UTank();// make U turn
					    			}
					    		else{
					    			TurnLeft();
					    			M12Helper = 23;
					    			}
					    	}
				       		break;	
				       		
				    	case 23: //Start motor
				        	if(TPM2_C1V == 0){
				        		SearchAndDriveFront(523,523,532,532);
				        		SecondRange(5,60,5,60);
				        		M12Helper = 24;
				        	}
				    		break;
				    		
				        case 24: //Turn Right
				        	M12Helper = 25;
				        	break;	
				        	
				    	case 25: //Start motor
				        	motor_DirSpeed(3,3);
				        	sample4EN=1;
				        	BlacklineSearchEn = 0;
			        		WallDrive = 1;
				        	M12Helper = 25;
				    		break;

				        }//end of switch
				        
						break; // end of case 2
						
				     case 3: //Hit 4 targets
					        switch(M13Helper){
					        
						      	case 0: //
						      		UpdateLocationXnothing(CurrX, (CurrTime- LastTime)*speed , CurrY) ;
						      		SearchToTheLeft(543,543,10,120);
						       		M13Helper = 3;
						       		DriveTime=0;
									EncodersSensing();
									LastTime = CurrTime;
									CurrX = (CurrTime- LastTime)*speed;
									CurrY = 450/2;
						       		break;	
						       		
						       	case 1: // Drive For 1 second  
						       		if(DriveTime == 0 ){
						       			motor_DirSpeed(3,3);
						       			sample3EN = 1;//follow black line
						       			M13Helper = 3;
						       		}
						       		else DriveTime--;
						       		break;						        
					        
						       	case 2: // move servo 
						       		//SearchToTheLeft(5,30,10,100);
						       		M13Helper = 3;
						       		CountRangeOfBlackLine++;
						       		break;	
					       		
						       	case 3: //Start motor
						       		motor_DirSpeed(3,3);
						       		CountRangeOfBlackLine++;
						       		sample3EN = 0;
						       		sample4EN = 1;
						       		BlacklineSearchEn=1;
						       		M13Helper = 4;
						       		break;
					        	
						       	case 4:  // Found in Range
						       		CountRangeOfBlackLine++;
						       		if (sample4EN == 0){
							      		UpdateLocationXBlackLine(CurrX, (CurrTime- LastTime)*speed , CurrY) ;
							      		UpdateLocationYnothing(CurrY,LastRightSonicSample , CurrX) ;
							      		UpdateTargetOnMap(CurrX,LastRightSonicSample);
							      		SearchToTheLeft(543,543,10,120);
							       		M13Helper = 3;
							       		DriveTime=0;
										EncodersSensing();
										LastTime = CurrTime;
										CurrX = (CurrTime- LastTime)*speed;
										CurrY = 450/2;
						       			if(WhichSide == 1) {// left found
						       				M13Helper = 20;
						       				UTank();
						       				FinishOneSideCount = 1;
						       				
					    			}
					    			else if(WhichSide == 2){ // right found target
					    				M13Helper = 5;
					    				TurnRight();
					    				}//end of sample4en =0
						       		}
					    		break;

					    		
					    	case 5: //Hit Target
					    		if(TPM1_C0V == 0){
					    			if(map[CurrX, LastRightSonicSample] != 3 | map[CurrX, LastRightSonicSample+1] != 3 | map[CurrX, LastRightSonicSample-1] != 3){
					    		    SearchAndDriveFront(3,30,3,30);
					    			M13Helper = 6;
					    			SecondRange(120,300,120,300);
					    			SecondDistanceEN = 1;
					    			}else M13Helper = 0;
					    		}
					    		break;	
					    		
					    	case 6: //Start motor
					    		sample4EN=1;
					    		BlacklineSearchEn=0;
					    		motor_DirSpeed(5,5);
					    		M13Helper = 7;
					    		break;
					    		
					    	case 7: //Start motor
					    		if (sample4EN == 0){
					    			SecondDistanceEN = 0;
					    			NumberOfTargetOnRight--;
					    			if (NumberOfTargetOnRight == 0)
					    				FinishOneSideCount = 1;
					    			
					    			M13Helper = 8;
					    			if(FinishOneSideCount == 1)DriveBack(3,3);
					    			else DriveBack(3,3);
					    			sample0EN = 1;//STOP ON BLACK LINE
					    		}
					    			//}else CountHowMuchToGoBack++;
					    		break;
					    		
					    	case 8: // Stop motor
					    		if(TPM2_C1V == 0){
					    			M13Helper = 9;
					    			if(FinishOneSideCount != 1){
					    				NumberOfFocusOnBlackLine = 400;
					    				LeftFocusBlackLine();
					    				}
					    			lastfix=0;// RIGHT
					    		}
					    		break;

					    	case 9: // go back to position
					    		if(FinishOneSideCount == 1){
					    			NumberOfFocusOnBlackLine = 600;
					    			RightFocusBlackLine();
					    			lastfix=0;// RIGHT
					    			M13Helper = 20;
					    		}else{
					    			//LeftFocusBlackLine();
					    			SearchToTheLeft(543,543,10,120);
					    			M13Helper = 10;
					    		}
					    		break;
					    		
					    	case 10: // go forward for avoid target that already touched
					    		if(TPM2_C1V == 0){
					    			sample3EN = 1;
					    			motor_DirSpeed(3,3);
					    			CountRangeOfBlackLine++;
					    			M13Helper = 2;
					    		}
					    		break;
					    	case 11: // go forward for avoid target that already touched
					    			M13Helper = 0;
					    			//SearchToTheLeft(5,30,10,100);
					    			
					    		break;					    		
					    		
					    	case 20: // go back to the first position
					    		if(TPM1_C0V == 0){
					    			NumberOfFocusOnBlackLine = 300;
					    			SearchAndDriveFront(3,30,3,30);
					    			M13Helper = 21;
					    		}
					    		break;					    		

					    	case 21: // go back to the first position
					    			motor_DirSpeed(3,3);
					    			M13Helper = 22;
					    			sample4EN=1;
					    			BlacklineSearchEn=1;
					    		break;	
					    		
					       	case 22:  // make position for left side search
					       		CountRangeOfBlackLine--;
					       		if (sample4EN == 0){
									M13Helper = 0;
									UTank();// make U turn
									Pit1state = 4;
					       		}else if(CountRangeOfBlackLine == 0){
					       			motor_DirSpeed(0,0);
					       			M13Helper = 23;
					       			sample4EN =0;
					       		}
					       		break;
					       		
					       	case 23:  // make position for left side search
								M13Helper = 0;
								UTank();// make U turn
								Pit1state = 4;
					       		break;

					       		
					        }// end of m13helper	
					    		
					     break;	// end of case 3	
					    			

					     
						     case 4: //Hit target on the left
							        switch(M14Helper){
								      	case 0: //
								      	if(TPM1_C0V == 0){
								      		UpdateLocationXnothing(CurrX, (CurrTime- LastTime)*speed , CurrY) ;
								      		SearchToTheLeft(543,543,10,120);
								       		M13Helper = 3;
								       		DriveTime=0;
											EncodersSensing();
											LastTime = CurrTime;
											CurrX = (CurrTime- LastTime)*speed;
											CurrY = 450/2;
								      		SearchToTheRight(10,100,543,543);
								       		M14Helper = 1;
								       		DriveTime=0;
								      	}
								       		break;	
								       		
								       	case 1: // Drive For 5 seconds  
								       		if(DriveTime == 0 ){
								       			motor_DirSpeed(4,4);
								       			sample3EN = 1;//stop follow black line
								       			M14Helper = 3;
								       		}
								       		else DriveTime--;
								       		break;						        
							        
								       	case 2: // move servo 
								       //		SearchToTheRight(10,100,5,20);
								       		M14Helper = 3;
								       		break;	
							       		
								       	case 3: //Start motor
								       		sample3EN = 0;
								       		sample4EN=1;
								       		BlacklineSearchEn=1;
								       		M14Helper = 4;
								       		break;
							        	
								       	case 4:  // Found in Range
								       		if (sample4EN == 0){
								       			UpdateLocationXBlackLine(CurrX, (CurrTime- LastTime)*speed , CurrY) ;
								       			UpdateLocationYnothing(CurrY,LastRightSonicSample , CurrX) ;
								       			UpdateTargetOnMap(CurrX,LastRightSonicSample);
												EncodersSensing();
												LastTime = CurrTime;
												CurrX = (CurrTime- LastTime)*speed;
												CurrY = 450/2;
								       			
							    			if(WhichSide == 2) {// right found
							    				Pit1state = 1;
							    				
							    			}
							    			else if(WhichSide == 1){ // left found target
							    				M14Helper = 5;
							    				TurnLeft();
							    				}//end of sample4en =0
								       		}
							    		break;

							    		
							    	case 5: //Hit Target
							    		if(TPM2_C1V == 0){
							    			if(map[CurrX, LastRightSonicSample] != 3 | map[CurrX, LastRightSonicSample+1] != 3 | map[CurrX, LastRightSonicSample-1] != 3){
							    		    SearchAndDriveFront(3,30,3,30);
							    			M14Helper = 6;
							    			SecondRange(120,300,120,300);
							    			SecondDistanceEN = 1;
							    			}else M14Helper = 0;
							    		}
							    		break;	
							    		
							    	case 6: //Start motor
							    		sample4EN=1;
							    		BlacklineSearchEn=0;
							    		motor_DirSpeed(3,3);
							    		M14Helper = 7;
							    		break;
							    		
							    	case 7: //search for target
							    		if (sample4EN == 0){
							    			SecondDistanceEN = 0;
							    			NumberOfTargetOnLeft--;
							    			if (NumberOfTargetOnLeft == 0)
							    				FinishLeftSideCount = 1;
							    			M14Helper = 8;
							    			DriveBack(3,3);
							    			sample0EN = 1;//stop when on black line
							    		}		
							    			//}else CountHowMuchToGoBack++;
							    		break;
							    		
							    	case 8: // Stop motor
							    		
							    		if(TPM1_C0V == 0){
							    			M14Helper = 9;
							    			if(FinishLeftSideCount != 1){
							    			NumberOfFocusOnBlackLine = 600;
							    			RightFocusBlackLine();
							    			}
							    			lastfix=1;// RIGHT
							    		}
							    		break;
							    		
							    	case 9: // go back to position
							    		if(FinishLeftSideCount == 1){
							    			NumberOfFocusOnBlackLine = 600;
							    			RightFocusBlackLine();
							    			lastfix=1;// RIGHT
							    			M14Helper = 20;
							    		}else{
							    	//	TurnRight();
							    		M14Helper = 10;
							    		}
							    		break;
							    		
							    	case 10: // go forward for avoid target that already touched
							    		if(TPM1_C0V == 0){
							    			sample3EN = 1;
							    			motor_DirSpeed(4,4);
							    			M14Helper = 11;
							    		}
							    		break;
							    	case 11: // go forward for avoid target that already touched
							    			SearchToTheRight(10,100,543,543);
							    		
							    			M14Helper = 0;
							    		break;					    		
							    		
							    	case 20: // go to finish position
							    		if(TPM2_C1V == 0){
							    			SearchAndDriveFront(5,60,5,60);
							    			M14Helper = 21;
							    		}
							    		break;					    		

							    	case 21: // go to finish position
							    			motor_DirSpeed(4,4);
							    			M14Helper = 22;
							    			sample4EN=1;
							    			BlacklineSearchEn=0;
							    		break;	
							    		
							       	case 22:  // stop motor and go to next stage
							       		if (sample4EN == 0){
							       			Pit1state = 2;
							       			BlacklineSearchEn=0;
							       			M14Helper = 0;
							       		}
							       		break;					    		
							       		
							        }//end of switch	
							    		
							     break;	// end of case 4					     
					     
					       
				    	
				     							
          } // end of pit 2
		PIT_TFLG1 = PIT_TFLG_TIF_MASK; //Turn off the Pit 0 Irq flag 
           
	}// end of PIT_TFLG1
}//end of PIT_IRQHandler

short FindSide(){
	count = 1;
	for(;count < 12 ; count++){
		if(RightScanSamplesTable[count][1] > 100 && RightScanSamplesTable[count][1] < 200) // found tunnel on the right 
			return 0;
		if(LeftScanSamplesTable[count][1] > 100 && LeftScanSamplesTable[count][1] < 200) // found tunnel on the left, making turn left
			return 1;
	}
	return 0;
}

void SecondRange(int LeftMin, int LeftMax, int RightMin, int RightMax){
	SecondLeftSonicMinDistance = LeftMin;
	SecondLeftSonicMaxDistance = LeftMax;
	SecondRightSonicMinDistance = RightMin;
	SecondRightSonicMaxDistance = RightMax;
}


void EmptyMap(){
	int x = 0;
	int y = 0;
	for (;x<650;x++){
		for(;y<450;y++){
			map[x][y] = 0;
		}
	}
}

void UpdateLocationXnothing(int startX, int endX , int y){
	for(;startX<endX;startX++){
		map[startX][y] = 1;
	}
}


void UpdateLocationYnothing(int startY, int endY , int x){
	for(;startY<endY;startY++){
		map[x][startY] = 1;
	}
}

void UpdateLocationXBlackLine(int startX, int endX , int y){
	for(;startX<endX;startX++){
		map[startX][y] = 2;
	}
}


void UpdateLocationYBlackLine(int startY, int endY , int x){
	for(;startY<endY;startY++){
		map[x][startY] = 2;
	}
}


void UpdateTargetOnMap(int x, int y){
	
		map[x][y] = 3;
	}


